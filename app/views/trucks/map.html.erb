<nav class="navbar navbar-default">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a id="brand" class="navbar-brand" href="/">GoTruck</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">
      </ul>
      <form class="navbar-form navbar-left">
        <div class="form-group">
          <input type="text" class="form-control" placeholder="Search" id="address" value="<%=@search%>">
        </div>
        <button type="submit" class="btn btn-default" id="menu-toggle">찾기</button>
      </form>
      
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>

  <!-- Page Content -->
  <div id="page-content-wrapper">
      <div id="map" style="width:100%;height:700px;opacity:0.9;"></div>
  </div>
  <!-- /#page-content-wrapper -->



<script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?clientId=PG2miqcCizsFVDMBnuiu&submodules=geocoder"></script>
<% content_for 'javascript_content' do %>
<%= javascript_include_tag 'maps', media: 'all' %>
<script>
  var mapOptions = {
      //쓸모없는 3가지 - scale, logo, mapData
      scaleControl: false,
      logoControl: false,
      mapDataControl: false, 
      zoomControl: true,
      zoomControlOptions: {
        style: naver.maps.ZoomControlStyle.LARGE,  //SMALL or LARGE(default : LARGE)
        position: naver.maps.Position.RIGHT_BOTTOM
      },
      mapTypeControl: true,
      //추가 가능 - 줌 범위 설정  
      minZoom: 4,
      maxZoom: 13,
  };
  
  var map = new N.Map('map', mapOptions);
    var infoWindow = new naver.maps.InfoWindow({
        anchorSkew: true
    });
    
    map.setCursor('pointer');
    
    // search by tm128 coordinate
    function searchCoordinateToAddress(latlng) {
        var tm128 = naver.maps.TransCoord.fromLatLngToTM128(latlng);
    
        infoWindow.close();
    
        naver.maps.Service.reverseGeocode({
            location: tm128,
            coordType: naver.maps.Service.CoordType.TM128
        }, function(status, response) {
            if (status === naver.maps.Service.Status.ERROR) {
                return alert('Something Wrong!');
            }
    
            var items = response.result.items,
                htmlAddresses = [];
    
            for (var i=0, ii=items.length, item, addrType; i<ii; i++) {
                item = items[i];
                addrType = item.isRoadAddress ? '[도로명 주소]' : '[지번 주소]';
    
                htmlAddresses.push((i+1) +'. '+ addrType +' '+ item.address);
            }
    
            infoWindow.setContent([
                    '<div style="padding:10px;min-width:200px;line-height:150%;">',
                    '<h4 style="margin-top:5px;">검색 좌표</h4><br />',
                    htmlAddresses.join('<br />'),
                    '</div>'
                ].join('\n'));
    
            infoWindow.open(map, latlng);
        });
    }
    
    // result by latlng coordinate
    function searchAddressToCoordinate(address) {
        naver.maps.Service.geocode({
            address: address
        }, function(status, response) {
            if (status === naver.maps.Service.Status.ERROR) {
                return alert('Something Wrong!');
            }
    
            var item = response.result.items[0],
                addrType = item.isRoadAddress ? '[도로명 주소]' : '[지번 주소]',
                point = new naver.maps.Point(item.point.x, item.point.y);
    
            infoWindow.setContent([
                    '<div style="padding:10px;min-width:200px;line-height:150%;">',
                    '<h4 style="margin-top:5px;">검색 주소 : '+ response.result.userquery +'</h4><br />',
                    addrType +' '+ item.address +'<br />',
                    '</div>'
                ].join('\n'));
    
    
            map.setCenter(point);
            infoWindow.open(map, point);
        });
    }
    
    function initGeocoder() {
        map.addListener('click', function(e) {
            searchCoordinateToAddress(e.coord);
        });
    
        $('#address').on('keydown', function(e) {
            var keyCode = e.which;
    
            if (keyCode === 13) { // Enter Key
                searchAddressToCoordinate($('#address').val());
            }
        });
    
        $('#menu-toggle').on('click', function(e) {
            e.preventDefault();
    
            searchAddressToCoordinate($('#address').val());
        });
    
        searchAddressToCoordinate('<%=@search%>');
    }
    
    naver.maps.onJSContentLoaded = initGeocoder;
    
    // var data = <%#= @schools.html_safe %>;
      var data;
      var markers = [];
      var infoWindows = [];
      getData();
      
      function getData(){
        var csrf_token = $("meta[name='csrf-token']").attr('content'); //토큰값 가져오기
        var bounds = map.getBounds();
        var max = bounds._ne;
        var min = bounds._sw;
        //중복되는 마커들을 삭제
        //for of 리스트 안에 있는 값을 꺼내는 형식
        for (marker of markers) {
          marker.setMap(null);
        }
        
        $.ajax({
          url: '/map_data',
          type: "POST", 
          data: {authenticity_token: csrf_token,
                 min: JSON.stringify(min),
                 max: JSON.stringify(max)}, //지도의 경계 좌표를 데이터로 보내줌
          dataType: 'json',
          success: function(map_data){
            data = map_data;
            makeMarkersInfos();
            addEvents();
          }
        });
      }
    function makeMarkersInfos(){
        for (var i=0; i < data.length; i++){
        var school = data[i];
        var name = school.name;
        var address = school.address;
        var lat = school.lat;
        var lng = school.lng;
        
        //이부분에서 카테고리마다 마커 이미지를 변경
        var marker = new N.Marker({
          position: new N.LatLng(lat, lng),
          map: map,
          icon: {
            url: "<%= asset_path('spot.png')%>",
            size: new naver.maps.Size(50, 52), //이미지 크기만큼 적어야 한다. 작으면 그만큼 짤려서 나옴
            origin: new naver.maps.Point(0, 0), //이미지 위치가 옮겨진다. 하지만 화면에서는 짤려서 나옴.
            anchor: new naver.maps.Point(25, 26) //이미지가 해당 위치에 중간에 올려면 이미지크기의 반값으로 x,y값을 넣어야 한다.
          },
          animation: 1 // 애니메니션 효과 두가지가 있음 1 = 계속 바운스, 2 = 등장시 떨어짐
        });
        
        var school_content = [
                        "<p>학교명 : "+name+"</p>",
                        "<p>주소 : "+address+"</p>"
                      ].join("");
        var infoWindow = new N.InfoWindow({
          content: school_content
        });
        
        markers.push(marker);
        infoWindows.push(infoWindow);
        }
    }
        
 // 해당 마커의 인덱스를 seq라는 클로저 변수로 저장하는 이벤트 핸들러를 반환합니다.
  function getClickHandler(seq) {
      return function(e) {
          var marker = markers[seq],
              infoWindow = infoWindows[seq];
  
          if (infoWindow.getMap()) {
              infoWindow.close();
          } else {
              infoWindow.open(map, marker);
          }
      }
  }
  
  function addEvents(){
    for (var i=0, ii=markers.length; i<ii; i++) {
        naver.maps.Event.addListener(markers[i], 'click', getClickHandler(i));
    }
  }

  // idle은 지도의 움직임이 종료되었을 경우 이벤트가 발생함
  N.Event.addListener(map, 'idle', function() {
      getData();
      //updateMarkers(map, markers);
  });
  
  function updateMarkers(map, markers) {
  
      var mapBounds = map.getBounds(); //지도의 남서쪽 좌욮, 북동쪽 좌표를 가져옴
      var marker, position;
  
      for (var i = 0; i < markers.length; i++) {
  
          marker = markers[i]
          position = marker.getPosition(); //마커의 좌표를 가져옴
  
          if (mapBounds.hasLatLng(position)) {  //각 마커의 좌표가 경계에 포함되어 있는지 확인함
              showMarker(map, marker);
          } else {
              hideMarker(map, marker);
          }
      }
  }
  
  function showMarker(map, marker) {
  
      if (marker.getMap()) return;
      marker.setMap(map);
  }
  
  function hideMarker(map, marker) {
  
      if (!marker.getMap()) return;
      marker.setMap(null);
  }

</script>
<% end %>